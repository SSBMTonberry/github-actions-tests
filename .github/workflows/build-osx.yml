name: MacOS

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-release:
    runs-on: ${{ matrix.os }}
    env:
      BUILD_TYPE: Release
    strategy:
      fail-fast: false
      matrix:
        # specify a specific compiler to build with each OS separately
        include:
          - platform_name: macos
            os: macos-latest
            cxx: clang++

    steps:
      - uses: actions/checkout@v2

#      - name: Configure OSX 1
#        env:
#          CXX: ${{ matrix.cxx }}
#        shell: bash
#        working-directory: ${{github.workspace}}/build
#        run: sudo port install llvm-9.0
#
#      - name: Configure OSX 2
#        env:
#          CXX: ${{ matrix.cxx }}
#        shell: bash
#        working-directory: ${{github.workspace}}/build
#        run: make nuke &&  make LLVM_VERSION=9.0 LLVM_DIRECTORY=/opt/local/libexec/llvm-9.0 \ MYCC=/opt/local/libexec/llvm-9.0/bin/clang MYCXX=/opt/local/libexec/llvm-9.0/bin/clang++

#      - name: Configure OSX 3
#        env:
#          CXX: ${{ matrix.cxx }}
#        shell: bash
#        working-directory: ${{github.workspace}}/build
#        run: export CPLUS_INCLUDE_PATH=/opt/local/libexec/llvm-9.0/include/c++/v1:/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include

#      - name: Configure OSX include
#        env:
#          CXX: ${{ matrix.cxx }}
#        shell: bash
#        working-directory: ${{github.workspace}}/build
#        run: export CPLUS_INCLUDE_PATH=/usr/local/opt/llvm/include/c++/v1:/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include
#
#      - name: Configure OSX libs
#        env:
#          CXX: ${{ matrix.cxx }}
#        shell: bash
#        working-directory: ${{github.workspace}}/build
#        run: export LIBRARY_PATH=$LIBRARY_PATH:/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/lib

      - name: Configure CMake
        env:
          CXX: ${{ matrix.cxx }}
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX:PATH=$GITHUB_WORKSPACE/artifacts

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE

      - name: Install
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Use CMake to "install" build artifacts (only interested in CMake registered targets) to our custom artifacts directory
        run: cmake --install . --config $BUILD_TYPE

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: cmake_filesystem_${{ github.run_number }}_${{ matrix.platform_name }}
          path: ${{github.workspace}}/artifacts